Basic Syntax :::
db.collection.aggregate([
    { stage1 },
    { stage2 },
    { stage3 }
])
====================================================================================================
Basic $match and $group Example ::: 
// Find total sales by category
db.sales.aggregate([
    {
        $match: { status: "completed" }
    },
    {
        $group: {
            _id: "$category",
            totalSales: { $sum: "$amount" }
        }
    }
])
====================================================================================================
$lookup Example ( Basic Join ) :::
// Join orders with customers
db.orders.aggregate([
    {
        $lookup: {
            from: "customers",
            localField: "customerId",
            foreignField: "_id",
            as: "customerInfo"
        }
    },
    {
        $unwind: "$customerInfo"
    },
    {
        $project: {
            orderId: 1,
            amount: 1,
            customerName: "$customerInfo.name",
            email: "$customerInfo.email"
        }
    }
])
--------
db.orders.aggregate([
  { 
    $lookup : {
    from : "customers",
    localField : "customerID",
    foreignField : "customerID",
    as : "customerInfo"
  } 
  }, 
  {
    $lookup : {
      from : "products",
      localField : "productID",
      foreignField : "productID",
      as : "productInto"
    }
  }
])
---------
db.orders.aggregate([
  { 
    $lookup : {
    from : "customers",
    localField : "customerID",
    foreignField : "customerID",
    as : "customerInfo"
  } 
  }, 
  {
    $lookup : {
      from : "products",
      localField : "productID",
      foreignField : "productID",
      as : "productInfo"
    }
  },
  { $unwind : "$customerInfo"},
  { $unwind : "$productInfo"},
  {
    $project : {
      _id : 0, orderID : 1, "customerInfo.name" : 1, "productInfo.productName" : 1, "productInfo.price" : 1, quantity : 1
    }
  }
])

db.orders.aggregate([
  // 1️⃣ Join customers
  {
    $lookup: {
      from: "customers",
      localField: "customerID",
      foreignField: "customerID",
      as: "customerInfo"
    }
  },

  // 2️⃣ Join products
  {
    $lookup: {
      from: "products",
      localField: "productID",
      foreignField: "productID",
      as: "productInfo"
    }
  },

  // 3️⃣ Unwind arrays
  { $unwind: "$customerInfo" },
  { $unwind: "$productInfo" },

  // 4️⃣ Group by customer
  {
    $group: {
      _id: "$customerInfo.name",        // group by customer name (or "$customerInfo.customerID")
      totalOrders: { $sum: 1 },         // count how many orders they made
      totalAmount: {                    // calculate total spending
        $sum: { $multiply: [ "$productInfo.price", "$quantity" ] }
      },
      orders: {                         // collect all orders
        $push: {
          orderID: "$orderID",
          product: "$productInfo.productName",
          price: "$productInfo.price",
          quantity: "$quantity"
        }
      }
    }
  },

  // 5️⃣ Optional: rename _id to "customerName"
  {
    $project: {
      _id: 0,
      customerName: "$_id",
      totalOrders: 1,
      totalAmount: 1,
      orders: 1
    }
  }
])

====================================================================================================
Date Grouping Example ::: 
// Group sales by date
db.sales.aggregate([
    {
        $group: {
            _id: {
                $dateToString: {
                    format: "%Y-%m-%d",
                    date: "$date"
                }
            },
            dailyTotal: { $sum: "$amount" },
            numberOfTransactions: { $count: {} }
        }
    }
])
====================================================================================================
$bucket Example ::: 
// Group products by price ranges
db.products.aggregate([
    {
        $bucket: {
            groupBy: "$price",
            boundaries: [0, 50, 100, 500, 1000],
            default: "1000+",
            output: {
                count: { $sum: 1 },
                items: { $push: "$name" },
                avgPrice: { $avg: "$price" }
            }
        }
    }
])

db.products.aggregate([
  {
    $bucket: {
      groupBy: "$price",              // field to group by
      boundaries: [0, 500, 1000, 5000, 10000], // define price ranges
      default: "10000+",              // bucket for prices > 10000
      output: {
        count: { $sum: 1 },           // count of items in the bucket
        products: { $push: "$productName" }, // list of product names
        avgPrice: { $avg: "$price" }  // average price in that range
      }
    }
  }
])

db.products.aggregate([
  {
    $bucketAuto: {
      groupBy: "$price",
      buckets: 5, // MongoDB automatically divides prices into 5 even ranges
      output: {
        count: { $sum: 1 },
        avgPrice: { $avg: "$price" },
        products: { $push: "$productName" }
      }
    }
  }
])

====================================================================================================
Advanced $graphLookup Example ::: 
// Find employee hierarchy
db.employees.aggregate([
    {
        $graphLookup: {
            from: "employees",
            startWith: "$managerId",
            connectFromField: "managerId",
            connectToField: "_id",
            as: "reportingHierarchy",
            maxDepth: 5
        }
    }
])

db.customers.aggregate([
  {
    $match: { name: "RiyazKhan" } // start from a specific customer
  },
  {
    $graphLookup: {
      from: "orders",
      startWith: "$customerID",        // RiyazKhan’s customerID
      connectFromField: "customerID",  // link customers recursively
      connectToField: "customerID",    // orders with the same customerID
      as: "relatedOrders",             // collect all connected orders
      restrictSearchWithMatch: {},     // optional filter
      maxDepth: 1
    }
  },
  {
    $lookup: {
      from: "products",
      localField: "relatedOrders.productID",
      foreignField: "productID",
      as: "relatedProducts"
    }
  }
])

db.customers.aggregate([
  {
    $match: { name: "RiyazKhan" }
  },
  {
    $graphLookup: {
      from: "orders",
      startWith: "$customerID",
      connectFromField: "productID",
      connectToField: "productID",
      as: "similarPurchases",
      restrictSearchWithMatch: {},
      maxDepth: 3
    }
  },
  {
    $lookup: {
      from: "products",
      localField: "similarPurchases.productID",
      foreignField: "productID",
      as: "relatedProducts"
    }
  }
])
====================================================================================================
Complex $unionWith Example
// Combine current and archived orders
db.currentOrders.aggregate([
    {
        $unionWith: {
            coll: "archivedOrders",
            pipeline: [
                { 
                    $match: { 
                        date: { 
                            $gte: new Date("2024-01-01") 
                        } 
                    }
                }
            ]
        }
    },
    {
        $sort: { date: -1 }
    }
])

db.customers.aggregate([
  {
    $project: {
      _id: 0,
      type: "Customer",
      name: 1,
      emailID: 1,
      city: 1,
      balance: 1
    }
  },
  {
    $unionWith: {
      coll: "orders",
      pipeline: [
        {
          $project: {
            _id: 0,
            type: "Order",
            orderID: 1,
            customerID: 1,
            productID: 1,
            quantity: 1,
            orderDate: 1
          }
        }
      ]
    }
  },
  { $sort: { type: 1 } }
])
