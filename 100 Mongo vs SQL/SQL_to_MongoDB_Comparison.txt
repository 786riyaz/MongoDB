SQL to MongoDB Command Mapping
======================================================================
Primary Key
MySQL Query: PRIMARY KEY id
Mongo Query: _id is the built-in primary key automatically created for every document.
======================================================================
Create Database
MySQL Query: CREATE DATABASE appdb;
Mongo Query: use("appdb"); Databases are created on first write to a collection.
======================================================================
Create Table / Collection
MySQL Query: CREATE TABLE people (...);
Mongo Query: db.createCollection("people"); Collections are schema-less and created implicitly on first insert.
======================================================================
Add Column
MySQL Query: ALTER TABLE people ADD col;
Mongo Query: db.people.updateMany({}, { $set: { col: <value> } }); Adds a field to existing documents.
======================================================================
Drop Column
MySQL Query: ALTER TABLE people DROP col;
Mongo Query: db.people.updateMany({}, { $unset: { col: "" } }); Removes a field from existing documents.
======================================================================
Drop Table / Collection
MySQL Query: DROP TABLE people;
Mongo Query: db.people.drop();
======================================================================
Create Index
MySQL Query: CREATE INDEX idx ON people(col ASC);
Mongo Query: db.people.createIndex({ col: 1 }); Options include { unique: true }.
======================================================================
Drop Index
MySQL Query: DROP INDEX idx;
Mongo Query: db.people.dropIndex("idx"); Drop by name or key spec.
======================================================================
Insert Single Row
MySQL Query: INSERT INTO people (...) VALUES (...);
Mongo Query: db.people.insertOne({ ... }); Creates collection if missing.
======================================================================
Insert Multiple Rows
MySQL Query: INSERT multiple rows;
Mongo Query: db.people.insertMany([{ ... }, { ... }]); Bulk insert.
======================================================================
Select All
MySQL Query: SELECT * FROM people;
Mongo Query: db.people.find({}); Returns a cursor.
======================================================================
Select Specific Columns
MySQL Query: SELECT name, age FROM people;
Mongo Query: db.people.find({}, { name: 1, age: 1 }); Projection to include only fields.
======================================================================
Where with Comparison
MySQL Query: SELECT ... WHERE age > 30;
Mongo Query: db.people.find({ age: { $gt: 30 } }); Use $gt, $gte, $lt, $lte.
======================================================================
AND Condition
MySQL Query: WHERE a=1 AND b=2;
Mongo Query: db.people.find({ a: 1, b: 2 }); Implicit AND.
======================================================================
OR Condition
MySQL Query: WHERE a=1 OR b=2;
Mongo Query: db.people.find({ $or: [ { a: 1 }, { b: 2 } ] }); Explicit $or.
======================================================================
IN Condition
MySQL Query: WHERE col IN (1,2,3);
Mongo Query: db.people.find({ col: { $in: [1,2,3] } });
======================================================================
NOT IN Condition
MySQL Query: WHERE col NOT IN (1,2,3);
Mongo Query: db.people.find({ col: { $nin: [1,2,3] } });
======================================================================
Between Range
MySQL Query: WHERE age BETWEEN 18 AND 65;
Mongo Query: db.people.find({ age: { $gte: 18, $lte: 65 } });
======================================================================
LIKE Operator
MySQL Query: WHERE name LIKE 'A%';
Mongo Query: db.people.find({ name: { $regex: '^A' } });
======================================================================
IS NULL Check
MySQL Query: WHERE col IS NULL;
Mongo Query: db.people.find({ col: null }); Optionally with { col: { $exists: false } }.
======================================================================
IS NOT NULL Check
MySQL Query: WHERE col IS NOT NULL;
Mongo Query: db.people.find({ col: { $ne: null } });
======================================================================
Order By
MySQL Query: ORDER BY age DESC;
Mongo Query: db.people.find({}).sort({ age: -1 }); Negative for descending.
======================================================================
Pagination (Limit + Offset)
MySQL Query: LIMIT 5 OFFSET 10;
Mongo Query: db.people.find({}).skip(10).limit(5);
======================================================================
Select Distinct
MySQL Query: SELECT DISTINCT status FROM people;
Mongo Query: db.people.distinct("status");
======================================================================
Count Records
MySQL Query: SELECT COUNT(*) FROM people;
Mongo Query: db.people.aggregate([{ $count: "count" }]);
======================================================================
Group By
MySQL Query: GROUP BY status;
Mongo Query: db.people.aggregate([{ $group: { _id: "$status", count: { $sum: 1 } } }]);
======================================================================
Group By with Having
MySQL Query: GROUP BY status HAVING count > 5;
Mongo Query: db.people.aggregate([{ $group: { _id: "$status", count: { $sum: 1 } } }, { $match: { count: { $gt: 5 } } }]);
======================================================================
Sum by Group
MySQL Query: SUM(price) BY status;
Mongo Query: db.people.aggregate([{ $group: { _id: "$status", total: { $sum: "$price" } } }]);
======================================================================
Average / Min / Max by Group
MySQL Query: AVG/MIN/MAX BY status;
Mongo Query: use $avg, $min, $max in $group accumulator expressions.
======================================================================
Join Tables
MySQL Query: JOIN (LEFT/INNER);
Mongo Query: Use $lookup in aggregation; left-outer join semantics.
======================================================================
Select Into New Table
MySQL Query: SELECT INTO NEW_TABLE ...;
Mongo Query: db.people.aggregate([... , { $out: "NEW_TABLE" }]);
======================================================================
Merge Into Table
MySQL Query: MERGE INTO TABLE ...;
Mongo Query: db.people.aggregate([... , { $merge: { into: "collectionName" } }]);
======================================================================
Union Queries
MySQL Query: UNION ALL query1 UNION ALL query2;
Mongo Query: db.people.aggregate([{ $unionWith: "otherCollection" }]);
======================================================================
Update Data
MySQL Query: UPDATE people SET status='C' WHERE ...;
Mongo Query: db.people.updateMany({ ... }, { $set: { status: "C" } });
======================================================================
Increment Field
MySQL Query: UPDATE people SET age = age + 1;
Mongo Query: db.people.updateMany({}, { $inc: { age: 1 } });
======================================================================
Upsert (Update or Insert)
MySQL Query: UPSERT ...;
Mongo Query: db.people.updateMany({ ... }, { $set: { ... } }, { upsert: true });
======================================================================
Delete Rows
MySQL Query: DELETE FROM people WHERE ...;
Mongo Query: db.people.deleteMany({ ... });
======================================================================
Truncate Table
MySQL Query: TRUNCATE TABLE people;
Mongo Query: db.people.deleteMany({}); Or drop the collection.
======================================================================
Transactions
MySQL Query:
BEGIN;
COMMIT;
ROLLBACK;
Mongo Query:
session.startTransaction();
session.commitTransaction();
session.abortTransaction();
